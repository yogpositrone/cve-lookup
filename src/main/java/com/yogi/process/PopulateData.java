package com.yogi.process;

import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.JAXBIntrospector;
import javax.xml.bind.Unmarshaller;

import org.springframework.beans.factory.annotation.Autowired;

import com.yogi.dao.CVEDAO;
import com.yogi.dao.DescriptionDAO;
import com.yogi.dao.VersionDAO;
import com.yogi.dao.VulSoftwareDAO;
import com.yogi.model.CVE;
import com.yogi.model.Description;
import com.yogi.model.Version;
import com.yogi.model.VulSoftware;

import gov.nist.nvd.feeds.cve._1.DescriptType;
import gov.nist.nvd.feeds.cve._1.EntryType;
import gov.nist.nvd.feeds.cve._1.Nvd;
import gov.nist.nvd.feeds.cve._1.ObjectFactory;
import gov.nist.nvd.feeds.cve._1.VulnSoftType;
import gov.nist.nvd.feeds.cve._1.VulnSoftType.Prod;
import gov.nist.nvd.feeds.cve._1.VulnSoftType.Prod.Vers;

public class PopulateData {

	public void setCveDAO(CVEDAO cveDAO) {
		this.cveDAO = cveDAO;
	}

	public void setVulSoftwareDAO(VulSoftwareDAO vulSoftwareDAO) {
		this.vulSoftwareDAO = vulSoftwareDAO;
	}

	public void setDescriptionDAO(DescriptionDAO descriptionDAO) {
		this.descriptionDAO = descriptionDAO;
	}

	public void setVersionDAO(VersionDAO versionDAO) {
		this.versionDAO = versionDAO;
	}

	@Autowired
	CVEDAO cveDAO;
	
	@Autowired
	VulSoftwareDAO vulSoftwareDAO;
	
	@Autowired
	DescriptionDAO descriptionDAO;
	
	@Autowired
	VersionDAO versionDAO;
	
	public void populateData() throws JAXBException {

		JAXBContext jaxbContext = JAXBContext.newInstance(ObjectFactory.class);

		Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();
		Nvd nvd = (Nvd) JAXBIntrospector
				.getValue(unmarshaller.unmarshal(ClassLoader.getSystemResourceAsStream("nvdcve-2003.xml")));

		List<EntryType> entryTypeList = nvd.getEntry();
		for (EntryType entryType : entryTypeList) {

			CVE cve = new CVE();
			cve.setName(entryType.getName());
			cve.setPublishDate(entryType.getPublished());
			cve.setSeverity(entryType.getSeverity());
			cve.setcVssScore(entryType.getCVSSVector());
			cve.setcVssVersion(entryType.getCVSSVersion());
			StringBuilder descIdList = new StringBuilder();
			for (DescriptType desc : entryType.getDesc().getDescript()) {
				Description description = new Description();
				description.setDesc(desc.getValue());
				description.setId(cve.getName());
				int id = descriptionDAO.insert(description);
				descIdList.append(id+",");
			}
			cve.setDescList(descIdList.toString());

			cveDAO.insert(cve);
			if (entryType.getVulnSoft() != null) {
				VulnSoftType vulnSoftType = entryType.getVulnSoft();
				VulSoftware vulSoftware = new VulSoftware();
				if (vulnSoftType.getProd() != null) {
					for (Prod prod : vulnSoftType.getProd()) {
						vulSoftware.setName(prod.getName());
						vulSoftware.setVendor(prod.getVendor());
						vulSoftware.setCveName(entryType.getName());
						Integer firstId = null;
						Integer lastId = null;
						for (Vers ver : prod.getVers()) {
							Version version = new Version();
							version.setSoftwareId(null);
							version.setVer(ver.getNum());
							if(firstId == null){
								firstId = versionDAO.insert(version);
								lastId = firstId;
							}else{
								lastId = versionDAO.insert(version);
							}
							
							
						}
						vulSoftware.setVersionList(firstId+","+lastId);
						int id = vulSoftwareDAO.insert(vulSoftware);
						for(int i = firstId ; i <= lastId ;i++){
							versionDAO.update(i, id);
						}
						
					}
				}
			} else {
				System.out.println("********************************************");
			}

		}

	}
}
