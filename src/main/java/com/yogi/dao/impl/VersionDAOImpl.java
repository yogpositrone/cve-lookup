package com.yogi.dao.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import com.yogi.dao.VersionDAO;
import com.yogi.model.Version;

public class VersionDAOImpl implements VersionDAO {

	private DataSource dataSource;

	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	@Override
	public int insert(Version version) {
		String sql = "INSERT INTO version " + "(software_id, version) VALUES (?, ?)";
		Connection conn = null;

		try {
			conn = (Connection) dataSource.getConnection();
			PreparedStatement ps = (PreparedStatement) conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, version.getSoftwareId());
			ps.setString(2, version.getVer());
			ps.executeUpdate();
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				return rs.getInt(1);
			}
			ps.close();

		} catch (SQLException e) {
			throw new RuntimeException(e);

		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		return -1;
	}

	@Override
	public List<Version> findBySoftware(String softwareName) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int update(int id, int softwareId) {
		Connection conn = null;
		try{
			String sql = "update version set software_id = " +softwareId + " where id = "+id;
		conn = (Connection) dataSource.getConnection();
		PreparedStatement ps = (PreparedStatement) conn.prepareStatement(sql);
		ps.executeUpdate(sql);
		}catch(SQLException e){
			throw new RuntimeException(e);
		}finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
		
		
		return 0;
	}

}
